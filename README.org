* Introduction

2018 basketball project

Use player trajectories to predict model player trajectories

# We use this [[https://docs.google.com/presentation/d/1UUQPWn69poKy3clSZHIpD6xedAG1rGOM1_9YFDfq0PU/edit#slide=id.g42b656bfa3_0_0][Google Slides]] to keep the notes

* Code Structure

We reuse the code genearted for 2017 basketball project for preprocessing the data.

We record the whole possession: where a possession is the time from the player
getting the ball until ball movement stops.

The data is contained in ../traj_data ordered by gamecode (ask jiaxuan for where
the data is located, don't need to generated twice). To generate this
data, we run data_pipeline.py.

# The injury data scraper is contained in the scraper directory. Player names
# comes from the legacy directory and can be generated with
# legacy/get_player_names.py. This is deprecated, we no longer look at player
# injury data.

** legacy

Legacy code (eg. definition of possesion) is put into legacy folder

** lib

Contains useful code for current project

* Data 
  
  ../traj_data contains possession data for each game.  We chop each possession
  into 1s chunks. We either predict the possession outcome or next second
  frames. We later turn this information into pytorch dataset.
  
* Event Meaning

#+BEGIN_EXAMPLE
event-id="10" event-description="Substitution"
event-id="11" event-description="Timeout"
event-id="12" event-description="Jump Ball"
event-id="15" event-description="End Period"
#+END_EXAMPLE

For more search in NBA_FINALPBP_EXP\$2016020610.XML

* Design Choice

ignore pbp_seq_num: don't use play by play definition of possession to mark
previous event; Use my definition instead.
